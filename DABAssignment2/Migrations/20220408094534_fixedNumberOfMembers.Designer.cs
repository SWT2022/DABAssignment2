// <auto-generated />
using System;
using DABAssignment2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DABAssignment2.Migrations
{
    [DbContext(typeof(MuniDbContext))]
    [Migration("20220408094534_fixedNumberOfMembers")]
    partial class fixedNumberOfMembers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DABAssignment2.Models.Location", b =>
                {
                    b.Property<long>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LocationId"), 1L, 1);

                    b.Property<int?>("Access_code")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Key_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1L,
                            Address = "Stivej 3",
                            Capacity = 300,
                            Key_Address = "Horsesvej 1253262",
                            Name = "FootballClub"
                        },
                        new
                        {
                            LocationId = 2L,
                            Access_code = 434321,
                            Address = "Stivej 3",
                            Capacity = 30230,
                            Name = "ProgrammerHouse"
                        },
                        new
                        {
                            LocationId = 3L,
                            Access_code = 432341,
                            Address = "Stivej 3",
                            Capacity = 321300,
                            Name = "´GamerHouse"
                        });
                });

            modelBuilder.Entity("DABAssignment2.Models.LocationHolidays", b =>
                {
                    b.Property<DateTime>("Holiday")
                        .HasColumnType("datetime2");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.HasKey("Holiday", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationHolidays");

                    b.HasData(
                        new
                        {
                            Holiday = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2812),
                            LocationId = 1L
                        },
                        new
                        {
                            Holiday = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2862),
                            LocationId = 2L
                        },
                        new
                        {
                            Holiday = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2869),
                            LocationId = 3L
                        });
                });

            modelBuilder.Entity("DABAssignment2.Models.LocationOpeningHours", b =>
                {
                    b.Property<DateTime>("Opening")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Closing")
                        .HasColumnType("datetime2");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.HasKey("Opening", "Closing", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationOpeningHours");

                    b.HasData(
                        new
                        {
                            Opening = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2883),
                            Closing = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2885),
                            LocationId = 1L
                        },
                        new
                        {
                            Opening = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2887),
                            Closing = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2889),
                            LocationId = 2L
                        },
                        new
                        {
                            Opening = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2891),
                            Closing = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2892),
                            LocationId = 3L
                        });
                });

            modelBuilder.Entity("DABAssignment2.Models.LocationsProperties", b =>
                {
                    b.Property<long>("LocationsPropertiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LocationsPropertiesId"), 1L, 1);

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PropName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("LocationsPropertiesId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PropName");

                    b.ToTable("LocationsProperties");

                    b.HasData(
                        new
                        {
                            LocationsPropertiesId = 1L,
                            LocationId = 1L,
                            PropName = "WiFi"
                        },
                        new
                        {
                            LocationsPropertiesId = 2L,
                            LocationId = 2L,
                            PropName = "WiFi"
                        },
                        new
                        {
                            LocationsPropertiesId = 3L,
                            LocationId = 3L,
                            PropName = "WiFi"
                        },
                        new
                        {
                            LocationsPropertiesId = 4L,
                            LocationId = 1L,
                            PropName = "WC"
                        },
                        new
                        {
                            LocationsPropertiesId = 5L,
                            LocationId = 2L,
                            PropName = "WC"
                        },
                        new
                        {
                            LocationsPropertiesId = 6L,
                            LocationId = 3L,
                            PropName = "WC"
                        });
                });

            modelBuilder.Entity("DABAssignment2.Models.Member", b =>
                {
                    b.Property<long>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MemberId"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentityNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("MemberId");

                    b.ToTable("Members");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Member");

                    b.HasData(
                        new
                        {
                            MemberId = 1L,
                            Email = "jan@email.com",
                            HomeAddress = "Aarhusvej 90",
                            IdentityNumber = 1234564,
                            Name = "Jan",
                            PhoneNumber = 12345678
                        },
                        new
                        {
                            MemberId = 2L,
                            Email = "Ole@email.com",
                            HomeAddress = "SesameStreet 12413",
                            IdentityNumber = 2142534635,
                            Name = "Ole",
                            PhoneNumber = 23456789
                        });
                });

            modelBuilder.Entity("DABAssignment2.Models.MembersLocationsReservations", b =>
                {
                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReservationBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationEnd")
                        .HasColumnType("datetime2");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.HasKey("LocationId", "ReservationBegin", "ReservationEnd");

                    b.HasIndex("MemberId");

                    b.ToTable("MembersLocationsReservations");

                    b.HasData(
                        new
                        {
                            LocationId = 1L,
                            ReservationBegin = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(3006),
                            ReservationEnd = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(3008),
                            MemberId = 1L
                        },
                        new
                        {
                            LocationId = 2L,
                            ReservationBegin = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(3010),
                            ReservationEnd = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(3012),
                            MemberId = 2L
                        },
                        new
                        {
                            LocationId = 3L,
                            ReservationBegin = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(3014),
                            ReservationEnd = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(3015),
                            MemberId = 3L
                        });
                });

            modelBuilder.Entity("DABAssignment2.Models.MembersRoomsReservations", b =>
                {
                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReservationBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationEnd")
                        .HasColumnType("datetime2");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.HasKey("RoomId", "ReservationBegin", "ReservationEnd");

                    b.HasIndex("MemberId");

                    b.ToTable("MembersRoomsReservations");

                    b.HasData(
                        new
                        {
                            RoomId = 1L,
                            ReservationBegin = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2975),
                            ReservationEnd = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2977),
                            MemberId = 1L
                        },
                        new
                        {
                            RoomId = 2L,
                            ReservationBegin = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2979),
                            ReservationEnd = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2980),
                            MemberId = 2L
                        },
                        new
                        {
                            RoomId = 3L,
                            ReservationBegin = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2982),
                            ReservationEnd = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2984),
                            MemberId = 3L
                        },
                        new
                        {
                            RoomId = 4L,
                            ReservationBegin = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2986),
                            ReservationEnd = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2987),
                            MemberId = 4L
                        },
                        new
                        {
                            RoomId = 5L,
                            ReservationBegin = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2989),
                            ReservationEnd = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2991),
                            MemberId = 5L
                        },
                        new
                        {
                            RoomId = 6L,
                            ReservationBegin = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2993),
                            ReservationEnd = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2994),
                            MemberId = 6L
                        });
                });

            modelBuilder.Entity("DABAssignment2.Models.Properties", b =>
                {
                    b.Property<string>("PropName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("PropName");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            PropName = "WiFi"
                        },
                        new
                        {
                            PropName = "WC"
                        },
                        new
                        {
                            PropName = "Coffee Machine"
                        });
                });

            modelBuilder.Entity("DABAssignment2.Models.Room", b =>
                {
                    b.Property<long>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RoomId"), 1L, 1);

                    b.Property<int?>("Access_code")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Key_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.HasKey("RoomId");

                    b.HasIndex("LocationId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1L,
                            Capacity = 330,
                            Key_Address = "Finlandsgade 123",
                            LocationId = 1L
                        },
                        new
                        {
                            RoomId = 2L,
                            Capacity = 340,
                            Key_Address = "ParkAvenue 123",
                            LocationId = 1L
                        },
                        new
                        {
                            RoomId = 3L,
                            Access_code = 123174,
                            Capacity = 304,
                            LocationId = 2L
                        },
                        new
                        {
                            RoomId = 4L,
                            Access_code = 871234,
                            Capacity = 930,
                            LocationId = 2L
                        },
                        new
                        {
                            RoomId = 5L,
                            Access_code = 178234,
                            Capacity = 730,
                            LocationId = 3L
                        },
                        new
                        {
                            RoomId = 6L,
                            Access_code = 145234,
                            Capacity = 630,
                            LocationId = 3L
                        });
                });

            modelBuilder.Entity("DABAssignment2.Models.RoomHolidays", b =>
                {
                    b.Property<DateTime>("Holiday")
                        .HasColumnType("datetime2");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.HasKey("Holiday", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomHolidays");

                    b.HasData(
                        new
                        {
                            Holiday = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2919),
                            RoomId = 1L
                        },
                        new
                        {
                            Holiday = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2921),
                            RoomId = 2L
                        },
                        new
                        {
                            Holiday = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2923),
                            RoomId = 3L
                        },
                        new
                        {
                            Holiday = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2925),
                            RoomId = 4L
                        },
                        new
                        {
                            Holiday = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2927),
                            RoomId = 5L
                        },
                        new
                        {
                            Holiday = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2928),
                            RoomId = 6L
                        });
                });

            modelBuilder.Entity("DABAssignment2.Models.RoomOpeningHours", b =>
                {
                    b.Property<DateTime>("Opening")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Closing")
                        .HasColumnType("datetime2");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint");

                    b.HasKey("Opening", "Closing", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomOpeningHours");

                    b.HasData(
                        new
                        {
                            Opening = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2941),
                            Closing = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2943),
                            RoomId = 1L
                        },
                        new
                        {
                            Opening = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2945),
                            Closing = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2947),
                            RoomId = 2L
                        },
                        new
                        {
                            Opening = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2949),
                            Closing = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2950),
                            RoomId = 3L
                        },
                        new
                        {
                            Opening = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2952),
                            Closing = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2954),
                            RoomId = 4L
                        },
                        new
                        {
                            Opening = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2955),
                            Closing = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2957),
                            RoomId = 5L
                        },
                        new
                        {
                            Opening = new DateTime(2022, 4, 8, 11, 45, 34, 180, DateTimeKind.Local).AddTicks(2959),
                            Closing = new DateTime(2022, 4, 8, 12, 45, 34, 180, DateTimeKind.Local).AddTicks(2960),
                            RoomId = 6L
                        });
                });

            modelBuilder.Entity("DABAssignment2.Models.Society", b =>
                {
                    b.Property<long>("SocietyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SocietyId"), 1L, 1);

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<long>("CVR_Number")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("SocietyId");

                    b.HasIndex("CVR_Number")
                        .IsUnique();

                    b.HasIndex("MemberId");

                    b.ToTable("Societies");

                    b.HasData(
                        new
                        {
                            SocietyId = 1L,
                            Activity = "Football",
                            Address = "Aarhusvej 10",
                            CVR_Number = 1234L,
                            MemberId = 1L,
                            Name = "FootballFc"
                        },
                        new
                        {
                            SocietyId = 2L,
                            Activity = "Programming",
                            Address = "Aarhusvej 12",
                            CVR_Number = 4321L,
                            MemberId = 2L,
                            Name = "Programmers"
                        },
                        new
                        {
                            SocietyId = 3L,
                            Activity = "Gaming",
                            Address = "Aarhusvej 14",
                            CVR_Number = 4321L,
                            MemberId = 3L,
                            Name = "Gamers"
                        });
                });

            modelBuilder.Entity("DABAssignment2.Models.Chairmen", b =>
                {
                    b.HasBaseType("DABAssignment2.Models.Member");

                    b.Property<string>("CPR_number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasDiscriminator().HasValue("Chairmen");

                    b.HasData(
                        new
                        {
                            MemberId = 4L,
                            Email = "per@email.com",
                            HomeAddress = "Gadevej 9",
                            IdentityNumber = 0,
                            Name = "Per",
                            PhoneNumber = 87654321,
                            CPR_number = "1234345590"
                        });
                });

            modelBuilder.Entity("DABAssignment2.Models.LocationHolidays", b =>
                {
                    b.HasOne("DABAssignment2.Models.Location", "Location")
                        .WithMany("Holidays")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DABAssignment2.Models.LocationOpeningHours", b =>
                {
                    b.HasOne("DABAssignment2.Models.Location", "Location")
                        .WithMany("OpeningHours")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DABAssignment2.Models.LocationsProperties", b =>
                {
                    b.HasOne("DABAssignment2.Models.Location", "Location")
                        .WithMany("LocationsProperties")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DABAssignment2.Models.Properties", "Property")
                        .WithMany("LocationsProperties")
                        .HasForeignKey("PropName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("DABAssignment2.Models.MembersLocationsReservations", b =>
                {
                    b.HasOne("DABAssignment2.Models.Location", "Location")
                        .WithMany("Reservations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DABAssignment2.Models.Member", "Member")
                        .WithMany("LocationsReservations")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("DABAssignment2.Models.MembersRoomsReservations", b =>
                {
                    b.HasOne("DABAssignment2.Models.Member", "Member")
                        .WithMany("RoomsReservations")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DABAssignment2.Models.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DABAssignment2.Models.Room", b =>
                {
                    b.HasOne("DABAssignment2.Models.Location", "Location")
                        .WithMany("Rooms")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DABAssignment2.Models.RoomHolidays", b =>
                {
                    b.HasOne("DABAssignment2.Models.Room", "Room")
                        .WithMany("Holidays")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DABAssignment2.Models.RoomOpeningHours", b =>
                {
                    b.HasOne("DABAssignment2.Models.Room", "Room")
                        .WithMany("OpeningHours")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DABAssignment2.Models.Society", b =>
                {
                    b.HasOne("DABAssignment2.Models.Member", "Member")
                        .WithMany("Societies")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("DABAssignment2.Models.Location", b =>
                {
                    b.Navigation("Holidays");

                    b.Navigation("LocationsProperties");

                    b.Navigation("OpeningHours");

                    b.Navigation("Reservations");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("DABAssignment2.Models.Member", b =>
                {
                    b.Navigation("LocationsReservations");

                    b.Navigation("RoomsReservations");

                    b.Navigation("Societies");
                });

            modelBuilder.Entity("DABAssignment2.Models.Properties", b =>
                {
                    b.Navigation("LocationsProperties");
                });

            modelBuilder.Entity("DABAssignment2.Models.Room", b =>
                {
                    b.Navigation("Holidays");

                    b.Navigation("OpeningHours");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
